datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl =  env("DATABASE_DIRECT_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Defined User Model

enum Role {
  user
  admin
  moderator
}

model User {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt     DateTime @default(now())
  firstName      String
  lastName       String
  email          String    @unique
  picture        String?
  hashedPassword String
  salt           String
  resetToken     String?
  resetTokenExpiresAt DateTime?
  signUpToken String? @unique
  signUpTokenExpiresAt DateTime?
  roles Role  @default(user)
  releases       Release[] // This establishes a one-to-many relationship with Release


}

// model Label {
//   id          Int      @id @default(autoincrement())
//   name        String   // Name of the Label
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @default(now())
//   users       User[]   // One-to-many relationship with User
//   releases    Release[] // One-to-many relationship with Release
// }

model Release {
  id                  Int      @id @default(autoincrement())
  userId              Int      // Foreign key to establish relationship with User
  songMasterReference String   // Link/reference to the uploaded file on S3
  songArtworkReference String  // Link/reference to the uploaded file on S3

  songTitle           String
  productTitle        String?  // Optional field
  artist              String
  featuredArtist      String?  // Optional field
  releaseDate         DateTime
  previouslyReleased  Boolean
  language            String   // Assuming language is stored as a string, you can adjust as needed
  primaryGenre        String   // Assuming genre is stored as a string, you can adjust as needed
  secondaryGenre      String?  // Optional field
  explicitLyrics      Boolean
  iscUpcCode         String
  pLine               String?  // Optional field
  cLine               String?  // Optional field
  length              Int      // Assuming length is stored in seconds as an integer
  user                User     @relation(fields: [userId], references: [id]) // This establishes the relationship with User
  label               String?  @default("JIGSAW")
}

// AudioSalad API Token Model
model ApiToken {
  id               Int      @id @default(autoincrement())
  accessToken      String
  refreshToken     String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  accessTokenExpiresAt       DateTime?
  refreshTokenExpiresAt      DateTime?
  expired Boolean @default(false)
}
