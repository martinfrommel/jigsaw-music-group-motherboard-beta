datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl =  env("DATABASE_DIRECT_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Defined User Model

enum Role {
  user
  admin
  moderator
}

enum primaryGenre {
  Alternative
  Blues
  ChildrensMusic
  Classical
  Comedy
  Country
  Dance
  Electronic
  HipHopRap
  Holiday
  Jazz
  Latino
  NewAge
  Pop
  RB
  Reggae
  Rock
  SingerSongwriter
  Soundtrack
  World
}

enum secondaryGenre {
  AlternativeIndieRock
  DanceBreakbeat
  DanceElectroHouse
  DanceHouse
  DanceTechno
  ElectronicAmbient
  ElectronicElectronica
  ElectronicExperimental
  HipHopRapAlternativeRap
  HolidayChristmas
  LatinRegionalMexicano
  LatinSalsa
  PopAdultContemporary
  PopKPop
  PopPopRock
  PopSoftRock
  RBSoulFunk
  RockMetal
  WorldAfroBeat
}

model User {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt     DateTime @default(now())
  firstName      String
  lastName       String
  email          String    @unique
  picture        String?
  hashedPassword String
  salt           String
  resetToken     String?
  resetTokenExpiresAt DateTime?
  signUpToken String? @unique
  signUpTokenExpiresAt DateTime?
  roles Role  @default(user)
  releases       Release[] // This establishes a one-to-many relationship with Release


}



model Release {
  id                  Int      @id @default(autoincrement())
  userId              Int      // Foreign key to establish relationship with User
  songMasterReference String   // Link/reference to the uploaded file on S3
  songArtworkReference String
  AWSFolderKey        String
  user                User     @relation(fields: [userId], references: [id]) // This establishes the relationship with User
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  songTitle           String
  productTitle        String?  // Optional field
  artist              String
  featuredArtist      String?  // Optional field
  releaseDate         DateTime? // Optional field
  previouslyReleased  Boolean
  language            String
  primaryGenre        primaryGenre 
  secondaryGenre      secondaryGenre?  // Optional field
  explicitLyrics      Boolean
  iscUpcCode         String
  pLine               String?  // Optional field
  cLine               String?  // Optional field
  length              Int ?     // Assuming length is stored in seconds as an integer
  label               Label? @relation(fields: [labelId], references: [id])
  labelId             Int?
}


model Label {
  id Int @id
  name String
  releases Release[]
}
// AudioSalad API Token Model
model ApiToken {
  id               Int      @id @default(autoincrement())
  accessToken      String
  refreshToken     String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  accessTokenExpiresAt       DateTime?
  refreshTokenExpiresAt      DateTime?
  accessTokenExpired Boolean @default(false)
  refreshTokenExpired Boolean @default(false)
}
